name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ master, dev ]
  workflow_dispatch:

jobs:
  validate:
    name: Lint & unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps --silent

      - name: Lint
        run: npm run lint

      - name: Test with coverage thresholds
        env:
          CI: true
        run: npm test

  build:
    name: Build OpenNext bundle
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps --silent

      - name: Build with OpenNext
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
        run: npm run opennext:build

      - name: Upload OpenNext artifact
        uses: actions/upload-artifact@v4
        with:
          name: open-next-bundle
          path: |
            .open-next
            wrangler.toml
          include-hidden-files: true
          if-no-files-found: error

  prepare-dev:
    name: Configure Cloudflare resources (dev)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      R2_SECRET_SOURCE: 'api-token'
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install runtime dependencies
        run: npm install --legacy-peer-deps --silent --omit=dev

      - name: Verify required secrets (dev)
        run: |
          set -euo pipefail

          required=(CF_API_TOKEN CF_ACCOUNT_ID CF_ZONE_ID R2_BUCKET)

          for name in "${required[@]}"; do
            value="${!name:-}"
            if [ -z "$value" ]; then
              echo "::error::Missing GitHub secret ${name}. Please create it in Settings > Secrets and variables > Actions." >&2
              exit 1
            fi
          done

          echo '::notice::Using CF_API_TOKEN for R2 authentication. The workflow will derive R2 credentials automatically.' >&2

      - name: Resolve R2 credentials (dev)
        env:
          R2_API_TOKEN: ${{ env.R2_API_TOKEN }}
          R2_SECRET_SOURCE: ${{ env.R2_SECRET_SOURCE }}
        run: |
          set -euo pipefail

          secret="${R2_SECRET_ACCESS_KEY:-}"
          access="${R2_ACCESS_KEY_ID:-}"
          token="${R2_API_TOKEN:-}"
          source="${R2_SECRET_SOURCE:-}"

          if [ -z "$secret" ] && [ -n "$token" ]; then
            secret="$(printf '%s' "$token" | sha256sum | awk '{print $1}')"
            echo 'Derived R2 secret access key from R2_API_TOKEN via sha256sum.'
          elif [ -n "$secret" ] && [ -n "$token" ] && [ "$secret" = "$token" ]; then
            secret="$(printf '%s' "$token" | sha256sum | awk '{print $1}')"
            echo 'Derived R2 secret access key from R2_API_TOKEN via sha256sum (matched raw token).'
          elif [ "$source" = 'api-token' ] && [ -n "$secret" ] && ! echo "$secret" | grep -Eq '^[0-9a-fA-F]{64}$'; then
            secret="$(printf '%s' "$secret" | sha256sum | awk '{print $1}')"
            echo 'Normalized R2 secret access key sourced from API token via sha256sum to enforce 64-character hex format.'
          elif [ "$source" = 'secret-key' ] && [ -n "$secret" ]; then
            echo 'Using provided R2 secret access key from Workers R2 Access Key credentials as-is.'
          elif [ -n "$secret" ] && ! echo "$secret" | grep -Eq '^[0-9a-fA-F]{64}$'; then
            echo '::notice::R2 secret access key is not a 64-character hex string; assuming a pre-existing S3 credential.'
          fi

          if [ -n "$token" ]; then
            if verify_response="$(
              curl --fail --silent --show-error \
                --retry 3 --retry-delay 2 --retry-all-errors \
                -H "Authorization: Bearer $token" \
                https://api.cloudflare.com/client/v4/user/tokens/verify
            )"; then
              access_candidate="$(printf '%s' "$verify_response" | jq -er '.result.id // empty' || true)"
              if [ -n "$access_candidate" ]; then
                if [ -n "$access" ] && [ "$access" != "$access_candidate" ]; then
                  echo "::warning::Provided R2 access key id ('$access') does not match the token id; replacing it with the verified value." >&2
                fi
                access="$access_candidate"
                echo 'Resolved R2 access key id via Cloudflare token verification.'
              elif [ -z "$access" ]; then
                echo '::error::Failed to resolve R2 access key id from R2_API_TOKEN via Cloudflare verification endpoint.' >&2
                exit 1
              else
                echo '::warning::Unable to verify R2 access key id; continuing with the provided value.' >&2
              fi
            else
              curl_status=$?
              verify_tmp="$(mktemp)"
              verify_code="$(
                curl --silent --show-error \
                  --retry 3 --retry-delay 2 --retry-all-errors \
                  -w '%{http_code}' \
                  -o "$verify_tmp" \
                  -H "Authorization: Bearer $token" \
                  https://api.cloudflare.com/client/v4/user/tokens/verify || true
              )"
              verify_code="$(printf '%s' "$verify_code" | tr -dc '0-9')"
              if [ -s "$verify_tmp" ]; then
                verify_snippet="$(tr '\n' ' ' < "$verify_tmp" | head -c 400)"
              else
                verify_snippet=''
              fi
              rm -f "$verify_tmp"
              if [ -z "$access" ]; then
                echo "::error::Failed to verify R2_API_TOKEN with Cloudflare (HTTP ${verify_code:-unknown}, exit ${curl_status}). Provide R2_ACCESS_KEY_ID or grant the token permission to call user/tokens/verify." >&2
                exit 1
              fi
              if [ "${verify_code}" = "401" ] || [ "${verify_code}" = "403" ]; then
                echo "::warning::Cloudflare token verification returned HTTP ${verify_code}. Continuing with provided R2 access key id. Ensure the token includes a permission that allows token verification (for example, User -> User Details: Read)." >&2
              else
                echo "::warning::Unable to verify R2 access key id via Cloudflare (HTTP ${verify_code:-unknown}, exit ${curl_status}). Continuing with the provided value." >&2
              fi
              if [ -n "$verify_snippet" ]; then
                echo "::notice::Cloudflare verification response snippet: ${verify_snippet}" >&2
              fi
            fi
          fi

          if [ -z "$secret" ]; then
            echo '::error::Unable to resolve an R2 secret access key for downstream scripts. Provide R2_SECRET_ACCESS_KEY or R2_API_TOKEN.' >&2
            exit 1
          fi

          if [ -z "$access" ]; then
            echo '::error::Unable to resolve an R2 access key id for downstream scripts. Provide R2_ACCESS_KEY_ID or R2_API_TOKEN.' >&2
            exit 1
          fi

          echo "R2_ACCESS_KEY_ID=$access" >> "$GITHUB_ENV"
          echo "R2_SECRET_ACCESS_KEY=$secret" >> "$GITHUB_ENV"

      - name: Debug Cloudflare environment values (dev)
        run: |
          set -euo pipefail

          for name in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_ZONE_ID; do
            if [ -z "${!name}" ]; then
              echo "::error::${name} is empty at runtime." >&2
              exit 1
            else
              echo "${name} is set"
            fi
          done

      - name: Sync R2 CORS policy (dev)
        run: node scripts/configure-r2-cors.js

      - name: Ensure R2 custom domain uses TLS 1.3 (dev)
        run: node scripts/configure-r2-custom-domain.js

  deploy-dev:
    name: Deploy to Cloudflare Workers (dev)
    runs-on: ubuntu-latest
    needs: [build, prepare-dev]
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      R2_SECRET_SOURCE: 'api-token'
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download OpenNext artifact
        uses: actions/download-artifact@v4
        with:
          name: open-next-bundle
          path: .

      - name: Render Wrangler config with environment secrets (dev)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ env.CLOUDFLARE_ZONE_ID }}
          R2_API_TOKEN: ${{ env.R2_API_TOKEN }}
          R2_BUCKET: ${{ env.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: ${{ env.R2_PUBLIC_HOSTNAME }}
        run: |
          set -euo pipefail

          if [ -z "${R2_API_TOKEN:-}" ]; then
            echo '::error::R2_API_TOKEN must be set before templating wrangler.toml.' >&2
            exit 1
          fi

          envsubst '${CLOUDFLARE_ACCOUNT_ID} ${CLOUDFLARE_ZONE_ID} ${R2_PUBLIC_HOSTNAME} ${R2_API_TOKEN} ${R2_BUCKET}' < wrangler.toml > wrangler.resolved.toml

      - name: Deploy to dev environment
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          CLOUDFLARE_ZONE_ID="$CLOUDFLARE_ZONE_ID" \
          npx --yes wrangler@4 deploy --config wrangler.resolved.toml --env dev

      - name: Confirm latest deployment (dev)
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          npx --yes wrangler@4 deployments status --config wrangler.resolved.toml --env dev

  prepare-production:
    name: Configure Cloudflare resources (production)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      R2_SECRET_SOURCE: 'api-token'
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install runtime dependencies
        run: npm install --legacy-peer-deps --silent --omit=dev

      - name: Verify required secrets (production)
        run: |
          set -euo pipefail

          required=(CF_API_TOKEN CF_ACCOUNT_ID CF_ZONE_ID R2_BUCKET)
          for name in "${required[@]}"; do
            value="${!name:-}"
            if [ -z "$value" ]; then
              echo "::error::Missing GitHub secret ${name}. Please create it in Settings > Secrets and variables > Actions." >&2
              exit 1
            fi
          done

          echo '::notice::Using CF_API_TOKEN for R2 authentication. The workflow will derive R2 credentials automatically.' >&2

      - name: Resolve R2 credentials (production)
        env:
          R2_API_TOKEN: ${{ env.R2_API_TOKEN }}
          R2_SECRET_SOURCE: ${{ env.R2_SECRET_SOURCE }}
        run: |
          set -euo pipefail

          secret="${R2_SECRET_ACCESS_KEY:-}"
          access="${R2_ACCESS_KEY_ID:-}"
          token="${R2_API_TOKEN:-}"
          source="${R2_SECRET_SOURCE:-}"

          if [ -z "$secret" ] && [ -n "$token" ]; then
            secret="$(printf '%s' "$token" | sha256sum | awk '{print $1}')"
            echo 'Derived R2 secret access key from R2_API_TOKEN via sha256sum.'
          elif [ -n "$secret" ] && [ -n "$token" ] && [ "$secret" = "$token" ]; then
            secret="$(printf '%s' "$token" | sha256sum | awk '{print $1}')"
            echo 'Derived R2 secret access key from R2_API_TOKEN via sha256sum (matched raw token).'
          elif [ "$source" = 'api-token' ] && [ -n "$secret" ] && ! echo "$secret" | grep -Eq '^[0-9a-fA-F]{64}$'; then
            secret="$(printf '%s' "$secret" | sha256sum | awk '{print $1}')"
            echo 'Normalized R2 secret access key sourced from API token via sha256sum to enforce 64-character hex format.'
          elif [ "$source" = 'secret-key' ] && [ -n "$secret" ]; then
            echo 'Using provided R2 secret access key from Workers R2 Access Key credentials as-is.'
          elif [ -n "$secret" ] && ! echo "$secret" | grep -Eq '^[0-9a-fA-F]{64}$'; then
            echo '::notice::R2 secret access key is not a 64-character hex string; assuming a pre-existing S3 credential.'
          fi

          if [ -n "$token" ]; then
            if verify_response="$(
              curl --fail --silent --show-error \
                --retry 3 --retry-delay 2 --retry-all-errors \
                -H "Authorization: Bearer $token" \
                https://api.cloudflare.com/client/v4/user/tokens/verify
            )"; then
              access_candidate="$(printf '%s' "$verify_response" | jq -er '.result.id // empty' || true)"
              if [ -n "$access_candidate" ]; then
                if [ -n "$access" ] && [ "$access" != "$access_candidate" ]; then
                  echo "::warning::Provided R2 access key id ('$access') does not match the token id; replacing it with the verified value." >&2
                fi
                access="$access_candidate"
                echo 'Resolved R2 access key id via Cloudflare token verification.'
              elif [ -z "$access" ]; then
                echo '::error::Failed to resolve R2 access key id from R2_API_TOKEN via Cloudflare verification endpoint.' >&2
                exit 1
              else
                echo '::warning::Unable to verify R2 access key id; continuing with the provided value.' >&2
              fi
            else
              curl_status=$?
              verify_tmp="$(mktemp)"
              verify_code="$(
                curl --silent --show-error \
                  --retry 3 --retry-delay 2 --retry-all-errors \
                  -w '%{http_code}' \
                  -o "$verify_tmp" \
                  -H "Authorization: Bearer $token" \
                  https://api.cloudflare.com/client/v4/user/tokens/verify || true
              )"
              verify_code="$(printf '%s' "$verify_code" | tr -dc '0-9')"
              if [ -s "$verify_tmp" ]; then
                verify_snippet="$(tr '\n' ' ' < "$verify_tmp" | head -c 400)"
              else
                verify_snippet=''
              fi
              rm -f "$verify_tmp"
              if [ -z "$access" ]; then
                echo "::error::Failed to verify R2_API_TOKEN with Cloudflare (HTTP ${verify_code:-unknown}, exit ${curl_status}). Provide R2_ACCESS_KEY_ID or grant the token permission to call user/tokens/verify." >&2
                exit 1
              fi
              if [ "${verify_code}" = "401" ] || [ "${verify_code}" = "403" ]; then
                echo "::warning::Cloudflare token verification returned HTTP ${verify_code}. Continuing with provided R2 access key id. Ensure the token includes a permission that allows token verification (for example, User -> User Details: Read)." >&2
              else
                echo "::warning::Unable to verify R2 access key id via Cloudflare (HTTP ${verify_code:-unknown}, exit ${curl_status}). Continuing with the provided value." >&2
              fi
              if [ -n "$verify_snippet" ]; then
                echo "::notice::Cloudflare verification response snippet: ${verify_snippet}" >&2
              fi
            fi
          fi

          if [ -z "$secret" ]; then
            echo '::error::Unable to resolve an R2 secret access key for downstream scripts. Provide R2_SECRET_ACCESS_KEY or R2_API_TOKEN.' >&2
            exit 1
          fi

          if [ -z "$access" ]; then
            echo '::error::Unable to resolve an R2 access key id for downstream scripts. Provide R2_ACCESS_KEY_ID or R2_API_TOKEN.' >&2
            exit 1
          fi

          echo "R2_ACCESS_KEY_ID=$access" >> "$GITHUB_ENV"
          echo "R2_SECRET_ACCESS_KEY=$secret" >> "$GITHUB_ENV"

      - name: Debug Cloudflare environment values (production)
        run: |
          set -euo pipefail

          for name in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_ZONE_ID; do
            if [ -z "${!name}" ]; then
              echo "::error::${name} is empty at runtime." >&2
              exit 1
            else
              echo "${name} is set"
            fi
          done

      - name: Sync R2 CORS policy (production)
        run: node scripts/configure-r2-cors.js

      - name: Ensure R2 custom domain uses TLS 1.3
        run: node scripts/configure-r2-custom-domain.js

  deploy-production:
    name: Deploy to Cloudflare Workers (production)
    runs-on: ubuntu-latest
    needs: [build, prepare-production]
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      R2_SECRET_SOURCE: 'api-token'
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download OpenNext artifact
        uses: actions/download-artifact@v4
        with:
          name: open-next-bundle
          path: .

      - name: Render Wrangler config with environment secrets (production)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ env.CLOUDFLARE_ZONE_ID }}
          R2_API_TOKEN: ${{ env.R2_API_TOKEN }}
          R2_BUCKET: ${{ env.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: ${{ env.R2_PUBLIC_HOSTNAME }}
        run: |
          set -euo pipefail

          if [ -z "${R2_API_TOKEN:-}" ]; then
            echo '::error::R2_API_TOKEN must be set before templating wrangler.toml.' >&2
            exit 1
          fi

          envsubst '${CLOUDFLARE_ACCOUNT_ID} ${CLOUDFLARE_ZONE_ID} ${R2_PUBLIC_HOSTNAME} ${R2_API_TOKEN} ${R2_BUCKET}' < wrangler.toml > wrangler.resolved.toml

      - name: Deploy to production environment
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          CLOUDFLARE_ZONE_ID="$CLOUDFLARE_ZONE_ID" \
          npx --yes wrangler@4 deploy --config wrangler.resolved.toml --env production

      - name: Confirm latest deployment (production)
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          npx --yes wrangler@4 deployments status --config wrangler.resolved.toml --env production
