name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ master, dev ]
  workflow_dispatch:

jobs:
  validate:
    name: Lint & unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps --silent

      - name: Lint
        run: npm run lint

      - name: Test with coverage thresholds
        env:
          CI: true
        run: npm test

  derive-r2-credentials:
    name: Derive R2 credentials from CF API token
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Resolve R2 credentials
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          set -euo pipefail

          token="${CF_API_TOKEN:-}"
          account_id="${CF_ACCOUNT_ID:-}"
          secret=""
          access=""

          if [ -z "$token" ]; then
            echo '::error::CF_API_TOKEN is required to derive R2 credentials.' >&2
            exit 1
          fi

          # Derive secret access key from token via SHA-256
          secret="$(printf '%s' "$token" | sha256sum | awk '{print $1}')"
          echo 'Derived R2 secret access key from CF_API_TOKEN via sha256sum.'

          # Get access key ID from Cloudflare token verification API
          if verify_response="$(
            curl --fail --silent --show-error \
              --retry 3 --retry-delay 2 --retry-all-errors \
              -H "Authorization: Bearer $token" \
              https://api.cloudflare.com/client/v4/user/tokens/verify
          )"; then
            access="$(printf '%s' "$verify_response" | jq -er '.result.id // empty' || true)"
            if [ -n "$access" ]; then
              echo 'Resolved R2 access key ID via Cloudflare token verification.'
            else
              echo '::error::Failed to extract token ID from Cloudflare verification response.' >&2
              exit 1
            fi
          else
            curl_status=$?
            verify_tmp="$(mktemp)"
            verify_code="$(
              curl --silent --show-error \
                --retry 3 --retry-delay 2 --retry-all-errors \
                -w '%{http_code}' \
                -o "$verify_tmp" \
                -H "Authorization: Bearer $token" \
                https://api.cloudflare.com/client/v4/user/tokens/verify || true
            )"
            verify_code="$(printf '%s' "$verify_code" | tr -dc '0-9')"
            if [ -s "$verify_tmp" ]; then
              verify_snippet="$(tr '\n' ' ' < "$verify_tmp" | head -c 400)"
              echo "::notice::Cloudflare verification response: ${verify_snippet}" >&2
            fi
            rm -f "$verify_tmp"
            echo "::error::Failed to verify CF_API_TOKEN with Cloudflare (HTTP ${verify_code:-unknown}, exit ${curl_status})." >&2
            exit 1
          fi

          # Save credentials to file for artifact upload
          mkdir -p .r2-credentials
          echo "R2_ACCOUNT_ID=$account_id" > .r2-credentials/credentials.env
          echo "R2_ACCESS_KEY_ID=$access" >> .r2-credentials/credentials.env
          echo "R2_SECRET_ACCESS_KEY=$secret" >> .r2-credentials/credentials.env
          
          echo "✅ R2 credentials derived successfully"
          echo "   Account ID: $account_id"
          echo "   Access Key ID: $access"
          echo "   Secret Key: ${secret:0:16}..." # Only show first 16 chars for security

      - name: Upload R2 credentials artifact
        uses: actions/upload-artifact@v4
        with:
          name: r2-credentials
          path: .r2-credentials/credentials.env
          retention-days: 1
          if-no-files-found: error

  build:
    name: Build OpenNext bundle
    runs-on: ubuntu-latest
    needs: derive-r2-credentials
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps --silent

      - name: Download R2 credentials
        uses: actions/download-artifact@v4
        with:
          name: r2-credentials
          path: .r2-credentials

      - name: Load R2 credentials
        id: load-creds
        run: |
          set -euo pipefail
          if [ -f .r2-credentials/credentials.env ]; then
            # Load into current environment for this step
            source .r2-credentials/credentials.env
            
            # Export as step outputs for next step
            echo "r2_account_id=$R2_ACCOUNT_ID" >> "$GITHUB_OUTPUT"
            echo "r2_access_key_id=$R2_ACCESS_KEY_ID" >> "$GITHUB_OUTPUT"
            echo "r2_secret_access_key=$R2_SECRET_ACCESS_KEY" >> "$GITHUB_OUTPUT"
            
            echo "✅ Loaded R2 credentials from artifact"
            echo "   Account ID: $R2_ACCOUNT_ID"
            echo "   Access Key ID: $R2_ACCESS_KEY_ID"
          else
            echo "::error::R2 credentials file not found" >&2
            exit 1
          fi

      - name: Build with OpenNext
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          R2_ACCOUNT_ID: ${{ steps.load-creds.outputs.r2_account_id }}
          R2_ACCESS_KEY_ID: ${{ steps.load-creds.outputs.r2_access_key_id }}
          R2_SECRET_ACCESS_KEY: ${{ steps.load-creds.outputs.r2_secret_access_key }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
        run: npm run opennext:build

      - name: Upload OpenNext artifact
        uses: actions/upload-artifact@v4
        with:
          name: open-next-bundle
          path: |
            .open-next
            wrangler.toml
          include-hidden-files: true
          if-no-files-found: error

  prepare-dev:
    name: Configure Cloudflare resources (dev)
    runs-on: ubuntu-latest
    needs: [build, derive-r2-credentials]
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install runtime dependencies
        run: npm install --legacy-peer-deps --silent --omit=dev

      - name: Download R2 credentials
        uses: actions/download-artifact@v4
        with:
          name: r2-credentials
          path: .r2-credentials

      - name: Load R2 credentials
        run: |
          set -euo pipefail
          if [ -f .r2-credentials/credentials.env ]; then
            cat .r2-credentials/credentials.env >> "$GITHUB_ENV"
            echo "✅ Loaded R2 credentials from artifact"
          else
            echo "::error::R2 credentials file not found" >&2
            exit 1
          fi

      - name: Debug Cloudflare environment values (dev)
        run: |
          set -euo pipefail

          for name in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_ZONE_ID; do
            if [ -z "${!name}" ]; then
              echo "::error::${name} is empty at runtime." >&2
              exit 1
            else
              echo "${name} is set"
            fi
          done

      - name: Sync R2 CORS policy (dev)
        run: node scripts/configure-r2-cors.js

      - name: Ensure R2 custom domain uses TLS 1.3 (dev)
        run: node scripts/configure-r2-custom-domain.js

  deploy-dev:
    name: Deploy to Cloudflare Workers (dev)
    runs-on: ubuntu-latest
    needs: [build, prepare-dev, derive-r2-credentials]
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download OpenNext artifact
        uses: actions/download-artifact@v4
        with:
          name: open-next-bundle
          path: .

      - name: Download R2 credentials artifact
        uses: actions/download-artifact@v4
        with:
          name: r2-credentials
          path: ./r2-creds

      - name: Load R2 credentials
        id: load-r2-creds
        run: |
          set -euo pipefail
          source ./r2-creds/r2-credentials.env
          echo "R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}" >> $GITHUB_OUTPUT
          echo "R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}" >> $GITHUB_OUTPUT
          echo "R2_ACCOUNT_ID=${R2_ACCOUNT_ID}" >> $GITHUB_OUTPUT

      - name: Render Wrangler config with environment secrets (dev)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ env.CLOUDFLARE_ZONE_ID }}
          R2_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          R2_BUCKET: ${{ env.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: ${{ env.R2_PUBLIC_HOSTNAME }}
          R2_ACCESS_KEY_ID: ${{ steps.load-r2-creds.outputs.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ steps.load-r2-creds.outputs.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ steps.load-r2-creds.outputs.R2_ACCOUNT_ID }}
        run: |
          set -euo pipefail

          if [ -z "${R2_API_TOKEN:-}" ]; then
            echo '::error::R2_API_TOKEN must be set before templating wrangler.toml.' >&2
            exit 1
          fi

          envsubst '${CLOUDFLARE_ACCOUNT_ID} ${CLOUDFLARE_ZONE_ID} ${R2_PUBLIC_HOSTNAME} ${R2_API_TOKEN} ${R2_BUCKET} ${R2_ACCESS_KEY_ID} ${R2_SECRET_ACCESS_KEY} ${R2_ACCOUNT_ID}' < wrangler.toml > wrangler.resolved.toml

      - name: Deploy to dev environment
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          CLOUDFLARE_ZONE_ID="$CLOUDFLARE_ZONE_ID" \
          npx --yes wrangler@4 deploy --config wrangler.resolved.toml --env dev

      - name: Confirm latest deployment (dev)
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          npx --yes wrangler@4 deployments status --config wrangler.resolved.toml --env dev

  prepare-production:
    name: Configure Cloudflare resources (production)
    runs-on: ubuntu-latest
    needs: [build, derive-r2-credentials]
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install runtime dependencies
        run: npm install --legacy-peer-deps --silent --omit=dev

      - name: Download R2 credentials
        uses: actions/download-artifact@v4
        with:
          name: r2-credentials
          path: .r2-credentials

      - name: Load R2 credentials
        run: |
          set -euo pipefail
          if [ -f .r2-credentials/credentials.env ]; then
            cat .r2-credentials/credentials.env >> "$GITHUB_ENV"
            echo "✅ Loaded R2 credentials from artifact"
          else
            echo "::error::R2 credentials file not found" >&2
            exit 1
          fi

      - name: Debug Cloudflare environment values (production)
        run: |
          set -euo pipefail

          for name in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_ZONE_ID; do
            if [ -z "${!name}" ]; then
              echo "::error::${name} is empty at runtime." >&2
              exit 1
            else
              echo "${name} is set"
            fi
          done

      - name: Sync R2 CORS policy (production)
        run: node scripts/configure-r2-cors.js

      - name: Ensure R2 custom domain uses TLS 1.3
        run: node scripts/configure-r2-custom-domain.js

  deploy-production:
    name: Deploy to Cloudflare Workers (production)
    runs-on: ubuntu-latest
    needs: [build, prepare-production, derive-r2-credentials]
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download OpenNext artifact
        uses: actions/download-artifact@v4
        with:
          name: open-next-bundle
          path: .

      - name: Download R2 credentials artifact
        uses: actions/download-artifact@v4
        with:
          name: r2-credentials
          path: ./r2-creds

      - name: Load R2 credentials
        id: load-r2-creds
        run: |
          set -euo pipefail
          source ./r2-creds/r2-credentials.env
          echo "R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}" >> $GITHUB_OUTPUT
          echo "R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}" >> $GITHUB_OUTPUT
          echo "R2_ACCOUNT_ID=${R2_ACCOUNT_ID}" >> $GITHUB_OUTPUT

      - name: Render Wrangler config with environment secrets (production)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ env.CLOUDFLARE_ZONE_ID }}
          R2_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          R2_BUCKET: ${{ env.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: ${{ env.R2_PUBLIC_HOSTNAME }}
          R2_ACCESS_KEY_ID: ${{ steps.load-r2-creds.outputs.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ steps.load-r2-creds.outputs.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ steps.load-r2-creds.outputs.R2_ACCOUNT_ID }}
        run: |
          set -euo pipefail

          if [ -z "${R2_API_TOKEN:-}" ]; then
            echo '::error::R2_API_TOKEN must be set before templating wrangler.toml.' >&2
            exit 1
          fi

          envsubst '${CLOUDFLARE_ACCOUNT_ID} ${CLOUDFLARE_ZONE_ID} ${R2_PUBLIC_HOSTNAME} ${R2_API_TOKEN} ${R2_BUCKET} ${R2_ACCESS_KEY_ID} ${R2_SECRET_ACCESS_KEY} ${R2_ACCOUNT_ID}' < wrangler.toml > wrangler.resolved.toml

      - name: Deploy to production environment
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          CLOUDFLARE_ZONE_ID="$CLOUDFLARE_ZONE_ID" \
          npx --yes wrangler@4 deploy --config wrangler.resolved.toml --env production

      - name: Confirm latest deployment (production)
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          npx --yes wrangler@4 deployments status --config wrangler.resolved.toml --env production
