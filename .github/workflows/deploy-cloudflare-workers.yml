name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ master, dev ]
  workflow_dispatch:

jobs:
  validate:
    name: Lint & unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps --silent

      - name: Lint
        run: npm run lint

      - name: Test with coverage thresholds
        env:
          CI: true
        run: npm test

  build:
    name: Build OpenNext bundle
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps --silent

      - name: Build with OpenNext
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY || secrets.R2_API_TOKEN }}
          R2_API_TOKEN: ${{ secrets.R2_API_TOKEN }}
          R2_SECRET_SOURCE: "${{ secrets.R2_SECRET_ACCESS_KEY != '' && 'secret-key' || secrets.R2_API_TOKEN != '' && 'api-token' || '' }}"
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
        run: npm run opennext:build

      - name: Upload OpenNext artifact
        uses: actions/upload-artifact@v4
        with:
          name: open-next-bundle
          path: |
            .open-next
            wrangler.toml
          include-hidden-files: true
          if-no-files-found: error

  prepare-dev:
    name: Configure Cloudflare resources (dev)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY || secrets.R2_API_TOKEN }}
      R2_API_TOKEN: ${{ secrets.R2_API_TOKEN }}
      R2_SECRET_SOURCE: "${{ secrets.R2_SECRET_ACCESS_KEY != '' && 'secret-key' || secrets.R2_API_TOKEN != '' && 'api-token' || '' }}"
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: ${{ secrets.R2_PUBLIC_HOSTNAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install runtime dependencies
        run: npm install --legacy-peer-deps --silent --omit=dev

      - name: Verify required secrets (dev)
        run: |
          set -euo pipefail

          required=(CF_API_TOKEN CF_ACCOUNT_ID CF_ZONE_ID R2_ACCESS_KEY_ID R2_ACCOUNT_ID R2_BUCKET)

          for name in "${required[@]}"; do
            value="${!name:-}"
            if [ -z "$value" ]; then
              echo "::error::Missing GitHub secret ${name}. Please create it in Settings > Secrets and variables > Actions." >&2
              exit 1
            fi
          done

          if [ -z "${R2_SECRET_SOURCE:-}" ]; then
            echo '::error::Missing GitHub secret R2_SECRET_ACCESS_KEY or R2_API_TOKEN. Provide a credential with Workers R2 Storage Write permissions.' >&2
            exit 1
          fi

          if [ "${R2_SECRET_SOURCE}" = 'api-token' ]; then
            echo '::notice::Using R2_API_TOKEN as the secret access key for S3-compatible requests. Ensure the token value is hashed per Cloudflare guidance.' >&2
          fi

          if [ -z "${R2_PUBLIC_HOSTNAME:-}" ]; then
            echo "::notice::Optional secret R2_PUBLIC_HOSTNAME is not configured. Falling back to the default Cloudflare R2 public URL." >&2
          fi

      - name: Debug Cloudflare environment values (dev)
        run: |
          set -euo pipefail

          for name in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_ZONE_ID; do
            if [ -z "${!name}" ]; then
              echo "::error::${name} is empty at runtime." >&2
              exit 1
            else
              echo "${name} is set"
            fi
          done

      - name: Sync R2 CORS policy (dev)
        run: node scripts/configure-r2-cors.js

  deploy-dev:
    name: Deploy to Cloudflare Workers (dev)
    runs-on: ubuntu-latest
    needs: [build, prepare-dev]
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY || secrets.R2_API_TOKEN }}
      R2_API_TOKEN: ${{ secrets.R2_API_TOKEN }}
      R2_SECRET_SOURCE: "${{ secrets.R2_SECRET_ACCESS_KEY != '' && 'secret-key' || secrets.R2_API_TOKEN != '' && 'api-token' || '' }}"
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: ${{ secrets.R2_PUBLIC_HOSTNAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download OpenNext artifact
        uses: actions/download-artifact@v4
        with:
          name: open-next-bundle
          path: .

      - name: Render Wrangler config with environment secrets (dev)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ env.CLOUDFLARE_ZONE_ID }}
          R2_ACCESS_KEY_ID: ${{ env.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ env.R2_SECRET_ACCESS_KEY }}
          R2_API_TOKEN: ${{ env.R2_API_TOKEN }}
          R2_SECRET_SOURCE: ${{ env.R2_SECRET_SOURCE }}
          R2_ACCOUNT_ID: ${{ env.R2_ACCOUNT_ID }}
          R2_BUCKET: ${{ env.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: ${{ env.R2_PUBLIC_HOSTNAME }}
        run: |
          set -euo pipefail
          resolved_secret="${R2_SECRET_ACCESS_KEY:-}"

          if [ -z "$resolved_secret" ] && [ -n "${R2_API_TOKEN:-}" ]; then
            resolved_secret="$R2_API_TOKEN"
          fi

          if [ -z "$resolved_secret" ]; then
            echo '::error::Unable to resolve an R2 secret for templating wrangler.toml. Provide R2_SECRET_ACCESS_KEY or R2_API_TOKEN.' >&2
            exit 1
          fi

          export R2_SECRET_ACCESS_KEY="$resolved_secret"
          envsubst '${CLOUDFLARE_ACCOUNT_ID} ${CLOUDFLARE_ZONE_ID} ${R2_PUBLIC_HOSTNAME} ${R2_ACCESS_KEY_ID} ${R2_SECRET_ACCESS_KEY} ${R2_ACCOUNT_ID} ${R2_BUCKET}' < wrangler.toml > wrangler.resolved.toml

      - name: Deploy to dev environment
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          CLOUDFLARE_ZONE_ID="$CLOUDFLARE_ZONE_ID" \
          npx --yes wrangler@4 deploy --config wrangler.resolved.toml --env dev

      - name: Confirm latest deployment (dev)
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          npx --yes wrangler@4 deployments status --config wrangler.resolved.toml --env dev

  prepare-production:
    name: Configure Cloudflare resources (production)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY || secrets.R2_API_TOKEN }}
      R2_API_TOKEN: ${{ secrets.R2_API_TOKEN }}
      R2_SECRET_SOURCE: "${{ secrets.R2_SECRET_ACCESS_KEY != '' && 'secret-key' || secrets.R2_API_TOKEN != '' && 'api-token' || '' }}"
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install runtime dependencies
        run: npm install --legacy-peer-deps --silent --omit=dev

      - name: Verify required secrets (production)
        run: |
          set -euo pipefail

          required=(CF_API_TOKEN CF_ACCOUNT_ID CF_ZONE_ID R2_ACCESS_KEY_ID R2_ACCOUNT_ID R2_BUCKET)
          for name in "${required[@]}"; do
            value="${!name:-}"
            if [ -z "$value" ]; then
              echo "::error::Missing GitHub secret ${name}. Please create it in Settings > Secrets and variables > Actions." >&2
              exit 1
            fi
          done

          if [ -z "${R2_SECRET_SOURCE:-}" ]; then
            echo '::error::Missing GitHub secret R2_SECRET_ACCESS_KEY or R2_API_TOKEN. Provide a credential with Workers R2 Storage Write permissions.' >&2
            exit 1
          fi

          if [ "${R2_SECRET_SOURCE}" = 'api-token' ]; then
            echo '::notice::Using R2_API_TOKEN as the secret access key for S3-compatible requests. Ensure the token value is hashed per Cloudflare guidance.' >&2
          fi

      - name: Debug Cloudflare environment values (production)
        run: |
          set -euo pipefail

          for name in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_ZONE_ID; do
            if [ -z "${!name}" ]; then
              echo "::error::${name} is empty at runtime." >&2
              exit 1
            else
              echo "${name} is set"
            fi
          done

      - name: Sync R2 CORS policy (production)
        run: node scripts/configure-r2-cors.js

      - name: Ensure R2 custom domain uses TLS 1.3
        run: node scripts/configure-r2-custom-domain.js

  deploy-production:
    name: Deploy to Cloudflare Workers (production)
    runs-on: ubuntu-latest
    needs: [build, prepare-production]
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
    env:
      CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY || secrets.R2_API_TOKEN }}
      R2_API_TOKEN: ${{ secrets.R2_API_TOKEN }}
      R2_SECRET_SOURCE: "${{ secrets.R2_SECRET_ACCESS_KEY != '' && 'secret-key' || secrets.R2_API_TOKEN != '' && 'api-token' || '' }}"
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: https://r2.inkpup.ca
      R2_CUSTOM_DOMAIN: r2.inkpup.ca
      R2_MIN_TLS: '1.3'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download OpenNext artifact
        uses: actions/download-artifact@v4
        with:
          name: open-next-bundle
          path: .

      - name: Render Wrangler config with environment secrets (production)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ env.CLOUDFLARE_ZONE_ID }}
          R2_ACCESS_KEY_ID: ${{ env.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ env.R2_SECRET_ACCESS_KEY }}
          R2_API_TOKEN: ${{ env.R2_API_TOKEN }}
          R2_SECRET_SOURCE: ${{ env.R2_SECRET_SOURCE }}
          R2_ACCOUNT_ID: ${{ env.R2_ACCOUNT_ID }}
          R2_BUCKET: ${{ env.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: ${{ env.R2_PUBLIC_HOSTNAME }}
        run: |
          set -euo pipefail
          resolved_secret="${R2_SECRET_ACCESS_KEY:-}"

          if [ -z "$resolved_secret" ] && [ -n "${R2_API_TOKEN:-}" ]; then
            resolved_secret="$R2_API_TOKEN"
          fi

          if [ -z "$resolved_secret" ]; then
            echo '::error::Unable to resolve an R2 secret for templating wrangler.toml. Provide R2_SECRET_ACCESS_KEY or R2_API_TOKEN.' >&2
            exit 1
          fi

          export R2_SECRET_ACCESS_KEY="$resolved_secret"
          envsubst '${CLOUDFLARE_ACCOUNT_ID} ${CLOUDFLARE_ZONE_ID} ${R2_PUBLIC_HOSTNAME} ${R2_ACCESS_KEY_ID} ${R2_SECRET_ACCESS_KEY} ${R2_ACCOUNT_ID} ${R2_BUCKET}' < wrangler.toml > wrangler.resolved.toml

      - name: Deploy to production environment
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          CLOUDFLARE_ZONE_ID="$CLOUDFLARE_ZONE_ID" \
          npx --yes wrangler@4 deploy --config wrangler.resolved.toml --env production

      - name: Confirm latest deployment (production)
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          npx --yes wrangler@4 deployments status --config wrangler.resolved.toml --env production
