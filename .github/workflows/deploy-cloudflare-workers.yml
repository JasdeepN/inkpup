name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ master, dev ]
  workflow_dispatch:

env:
  R2_PUBLIC_HOSTNAME: ${{ vars.R2_PUBLIC_HOSTNAME || 'https://r2.inkpup.ca' }}
  R2_CUSTOM_DOMAIN: ${{ vars.R2_CUSTOM_DOMAIN || 'r2.inkpup.ca' }}
  R2_MIN_TLS: ${{ vars.R2_MIN_TLS || '1.3' }}

jobs:
  validate:
    name: Lint & unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps --silent

      - name: Lint
        run: npm run lint

      - name: Test with coverage thresholds
        env:
          CI: true
        run: npm test

  derive-r2-credentials-dev:
    name: Derive Cloudflare R2 credentials (dev)
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    env:
      R2_API_TOKEN: ${{ secrets.R2_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
    steps:
      - name: Derive R2 credentials from Cloudflare API token
        run: |
          set -euo pipefail

          python <<'PY'
          import hashlib
          import json
          import os
          import pathlib
          import sys
          import urllib.request

          token = os.environ.get("R2_API_TOKEN", "").strip()
          account_id = os.environ.get("CF_ACCOUNT_ID", "").strip()

          if not token:
              print("::error::R2_API_TOKEN secret is not configured.")
              sys.exit(1)

          if not account_id:
              print("::error::CF_ACCOUNT_ID secret is not configured.")
              sys.exit(1)

          print(f"::add-mask::{token}")
          print(f"::add-mask::{account_id}")

          request = urllib.request.Request(
              "https://api.cloudflare.com/client/v4/user/tokens/verify",
              method="GET",
              headers={"Authorization": f"Bearer {token}"},
          )

          try:
              with urllib.request.urlopen(request, timeout=30) as response:
                  payload = response.read().decode("utf-8")
          except Exception as exc:
              print(f"::error::Failed to call Cloudflare API: {exc}")
              sys.exit(1)

          try:
              data = json.loads(payload)
          except json.JSONDecodeError as exc:
              print(f"::error::Unable to parse Cloudflare verification response: {exc}")
              sys.exit(1)

          if not data.get("success"):
              errors = data.get("errors") or []
              message = errors[0].get("message") if errors else "Unable to verify token"
              print(f"::error::Failed to verify CF_API_TOKEN: {message}")
              sys.exit(1)

          token_id = data.get("result", {}).get("id")
          if not token_id:
              print("::error::Could not extract token id from verification response.")
              sys.exit(1)

          secret = hashlib.sha256(token.encode("utf-8")).hexdigest()

          print(f"::add-mask::{token_id}")
          print(f"::add-mask::{secret}")

          # Explicitly print working directory and credentials file location
          import os
          print(f"Current working directory: {os.getcwd()}")
          credentials_path = os.path.abspath('.r2-credentials/credentials.env')
          print(f"Credentials will be written to: {credentials_path}")

          pathlib.Path('.r2-credentials').mkdir(parents=True, exist_ok=True)
          with open('.r2-credentials/credentials.env', 'w', encoding='utf-8') as fh:
              fh.write(f"R2_ACCOUNT_ID={account_id}\n")
              fh.write(f"R2_ACCESS_KEY_ID={token_id}\n")
              fh.write(f"R2_SECRET_ACCESS_KEY={secret}\n")

          print(f"Credentials file exists: {os.path.exists(credentials_path)}")

          prefix = token_id[:8]
          print(f"Derived R2 access key ID prefix: {prefix}****")
          PY

      - name: Upload derived R2 credentials artifact (dev)
        uses: actions/upload-artifact@v4
        with:
          name: r2-credentials-dev
          path: .r2-credentials
          if-no-files-found: error
          retention-days: 1

  derive-r2-credentials-prod:
    name: Derive Cloudflare R2 credentials (prod)
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
    env:
      R2_API_TOKEN: ${{ secrets.R2_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
    steps:
      - name: Derive R2 credentials from Cloudflare API token
        run: |
          set -euo pipefail

          python <<'PY'
          import hashlib
          import json
          import os
          import pathlib
          import sys
          import urllib.request

          token = os.environ.get("R2_API_TOKEN", "").strip()
          account_id = os.environ.get("CF_ACCOUNT_ID", "").strip()

          if not token:
              print("::error::R2_API_TOKEN secret is not configured.")
              sys.exit(1)

          if not account_id:
              print("::error::CF_ACCOUNT_ID secret is not configured.")
              sys.exit(1)

          print(f"::add-mask::{token}")
          print(f"::add-mask::{account_id}")

          request = urllib.request.Request(
              "https://api.cloudflare.com/client/v4/user/tokens/verify",
              method="GET",
              headers={"Authorization": f"Bearer {token}"},
          )

          try:
              with urllib.request.urlopen(request, timeout=30) as response:
                  payload = response.read().decode("utf-8")
          except Exception as exc:
              print(f"::error::Failed to call Cloudflare API: {exc}")
              sys.exit(1)

          try:
              data = json.loads(payload)
          except json.JSONDecodeError as exc:
              print(f"::error::Unable to parse Cloudflare verification response: {exc}")
              sys.exit(1)

          if not data.get("success"):
              errors = data.get("errors") or []
              message = errors[0].get("message") if errors else "Unable to verify token"
              print(f"::error::Failed to verify CF_API_TOKEN: {message}")
              sys.exit(1)

          token_id = data.get("result", {}).get("id")
          if not token_id:
              print("::error::Could not extract token id from verification response.")
              sys.exit(1)

          secret = hashlib.sha256(token.encode("utf-8")).hexdigest()

          print(f"::add-mask::{token_id}")
          print(f"::add-mask::{secret}")

          # Explicitly print working directory and credentials file location
          import os
          print(f"Current working directory: {os.getcwd()}")
          credentials_path = os.path.abspath('.r2-credentials/credentials.env')
          print(f"Credentials will be written to: {credentials_path}")

          pathlib.Path('.r2-credentials').mkdir(parents=True, exist_ok=True)
          with open('.r2-credentials/credentials.env', 'w', encoding='utf-8') as fh:
              fh.write(f"R2_ACCOUNT_ID={account_id}\n")
              fh.write(f"R2_ACCESS_KEY_ID={token_id}\n")
              fh.write(f"R2_SECRET_ACCESS_KEY={secret}\n")

          print(f"Credentials file exists: {os.path.exists(credentials_path)}")

          prefix = token_id[:8]
          print(f"Derived R2 access key ID prefix: {prefix}****")
          PY

      - name: Upload derived R2 credentials artifact (prod)
        uses: actions/upload-artifact@v4
        with:
          name: r2-credentials-prod
          path: .r2-credentials
          if-no-files-found: error
          retention-days: 1

  build:
    name: Build OpenNext bundle
    runs-on: ubuntu-latest
    needs: [validate, derive-r2-credentials-dev, derive-r2-credentials-prod]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps --silent

      - name: Download derived R2 credentials
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.ref == 'refs/heads/dev' && 'r2-credentials-dev' || 'r2-credentials-prod' }}
          path: .r2-credentials

      - name: Export R2 credentials to environment
        shell: bash
        run: |
          set -euo pipefail
          source .r2-credentials/credentials.env
          {
            echo "R2_ACCOUNT_ID=${R2_ACCOUNT_ID}"
            echo "R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}"
            echo "R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}"
            echo "AWS_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}"
            echo "AWS_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}"
            echo "AWS_REGION=auto"
            echo "AWS_S3_FORCE_PATH_STYLE=true"
            echo "AWS_ENDPOINT=https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
          } >> "$GITHUB_ENV"

      - name: Build with OpenNext
        env:
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: ${{ env.R2_PUBLIC_HOSTNAME }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: npm run opennext:build

      - name: Upload OpenNext artifact
        uses: actions/upload-artifact@v4
        with:
          name: open-next-bundle
          path: |
            .open-next
            wrangler.toml
          include-hidden-files: true
          if-no-files-found: error

  prepare-dev:
    name: Configure Cloudflare resources (dev)
    runs-on: ubuntu-latest
    needs: [validate, derive-r2-credentials-dev]
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_API_TOKEN: ${{ secrets.R2_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install runtime dependencies
        run: npm install --legacy-peer-deps --silent --omit=dev

      - name: Download derived R2 credentials
        uses: actions/download-artifact@v4
        with:
          name: r2-credentials-dev
          path: .r2-credentials

      - name: Export R2 credentials to environment (dev)
        shell: bash
        run: |
          set -euo pipefail
          source .r2-credentials/credentials.env
          {
            echo "R2_ACCOUNT_ID=${R2_ACCOUNT_ID}"
            echo "R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}"
            echo "R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}"
            echo "AWS_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}"
            echo "AWS_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}"
            echo "AWS_REGION=auto"
            echo "AWS_S3_FORCE_PATH_STYLE=true"
            echo "AWS_ENDPOINT=https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
          } >> "$GITHUB_ENV"

      - name: Debug Cloudflare environment values (dev)
        run: |
          set -euo pipefail

          for name in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_ZONE_ID R2_BUCKET R2_ACCOUNT_ID R2_ACCESS_KEY_ID R2_SECRET_ACCESS_KEY; do
            if [ -z "${!name}" ]; then
              echo "::error::${name} is empty at runtime." >&2
              exit 1
            else
              echo "${name} is set"
            fi
          done

      - name: Sync R2 CORS policy (dev)
        run: node scripts/configure-r2-cors.js

      - name: Ensure R2 custom domain uses TLS 1.3 (dev)
        run: node scripts/configure-r2-custom-domain.js

  deploy-dev:
    name: Deploy to Cloudflare Workers (dev)
    runs-on: ubuntu-latest
    needs: [build, prepare-dev]
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_API_TOKEN: ${{ secrets.R2_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download OpenNext artifact
        uses: actions/download-artifact@v4
        with:
          name: open-next-bundle
          path: .

      - name: Render Wrangler config with environment secrets (dev)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ env.CLOUDFLARE_ZONE_ID }}
          R2_BUCKET: ${{ env.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: ${{ env.R2_PUBLIC_HOSTNAME }}
          CF_WEB_ANALYTICS_TOKEN: ${{ secrets.CF_WEB_ANALYTICS_TOKEN || '' }}
        run: |
          set -euo pipefail
          envsubst '${CLOUDFLARE_ACCOUNT_ID} ${CLOUDFLARE_ZONE_ID} ${R2_PUBLIC_HOSTNAME} ${R2_BUCKET} ${CF_WEB_ANALYTICS_TOKEN}' < wrangler.toml > wrangler.resolved.toml

      - name: Deploy to dev environment
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          CLOUDFLARE_ZONE_ID="$CLOUDFLARE_ZONE_ID" \
          npx --yes wrangler@4 deploy --config wrangler.resolved.toml --env dev

      - name: Confirm latest deployment (dev)
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          npx --yes wrangler@4 deployments status --config wrangler.resolved.toml --env dev

  prepare-production:
    name: Configure Cloudflare resources (production)
    runs-on: ubuntu-latest
    needs: [validate, derive-r2-credentials-prod]
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: ${{ secrets.R2_PUBLIC_HOSTNAME }}
      R2_CUSTOM_DOMAIN: ${{ secrets.R2_CUSTOM_DOMAIN }}
      R2_MIN_TLS: ${{ secrets.R2_MIN_TLS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install runtime dependencies
        run: npm install --legacy-peer-deps --silent --omit=dev

      - name: Download derived R2 credentials
        uses: actions/download-artifact@v4
        with:
          name: r2-credentials-prod
          path: .r2-credentials

      - name: Export R2 credentials to environment (production)
        shell: bash
        run: |
          set -euo pipefail
          source .r2-credentials/credentials.env
          {
            echo "R2_ACCOUNT_ID=${R2_ACCOUNT_ID}"
            echo "R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}"
            echo "R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}"
            echo "AWS_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}"
            echo "AWS_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}"
            echo "AWS_REGION=auto"
            echo "AWS_S3_FORCE_PATH_STYLE=true"
            echo "AWS_ENDPOINT=https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
          } >> "$GITHUB_ENV"

      - name: Debug Cloudflare environment values (production)
        run: |
          set -euo pipefail

          for name in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_ZONE_ID R2_BUCKET R2_ACCOUNT_ID R2_ACCESS_KEY_ID R2_SECRET_ACCESS_KEY; do
            if [ -z "${!name}" ]; then
              echo "::error::${name} is empty at runtime." >&2
              exit 1
            else
              echo "${name} is set"
            fi
          done

      - name: Sync R2 CORS policy (production)
        run: node scripts/configure-r2-cors.js

      - name: Ensure R2 custom domain uses TLS 1.3
        run: node scripts/configure-r2-custom-domain.js

  deploy-production:
    name: Deploy to Cloudflare Workers (production)
    runs-on: ubuntu-latest
    needs: [build, prepare-production]
    if: github.ref == 'refs/heads/master'
    environment:
      name: production
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_HOSTNAME: ${{ secrets.R2_PUBLIC_HOSTNAME }}
      R2_CUSTOM_DOMAIN: ${{ secrets.R2_CUSTOM_DOMAIN }}
      R2_MIN_TLS: ${{ secrets.R2_MIN_TLS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download OpenNext artifact
        uses: actions/download-artifact@v4
        with:
          name: open-next-bundle
          path: .

      - name: Render Wrangler config with environment secrets (production)
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_ZONE_ID: ${{ env.CLOUDFLARE_ZONE_ID }}
          R2_BUCKET: ${{ env.R2_BUCKET }}
          R2_PUBLIC_HOSTNAME: ${{ env.R2_PUBLIC_HOSTNAME }}
          CF_WEB_ANALYTICS_TOKEN: ${{ secrets.CF_WEB_ANALYTICS_TOKEN || '' }}
        run: |
          set -euo pipefail
          envsubst '${CLOUDFLARE_ACCOUNT_ID} ${CLOUDFLARE_ZONE_ID} ${R2_PUBLIC_HOSTNAME} ${R2_BUCKET} ${CF_WEB_ANALYTICS_TOKEN}' < wrangler.toml > wrangler.resolved.toml

      - name: Deploy to production environment
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          CLOUDFLARE_ZONE_ID="$CLOUDFLARE_ZONE_ID" \
          npx --yes wrangler@4 deploy --config wrangler.resolved.toml --env production

      - name: Confirm latest deployment (production)
        run: |
          set -euo pipefail
          CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
          npx --yes wrangler@4 deployments status --config wrangler.resolved.toml --env production
