name: Deploy to Cloudflare Pages

on:
  push:
    branches: [ main, master ]

jobs:
  feature-flag:
    runs-on: ubuntu-latest
    outputs:
      enabled: ${{ steps.fetch-flag.outputs.enabled }}
    steps:
      - name: Fetch Cloudflare deploy flag
        id: fetch-flag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FLAG_NAME: CLOUDFLARE_PAGES_DEPLOY
          REPO: ${{ github.repository }}
        run: |
          response=$(curl -sSL -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${REPO}/actions/variables/${FLAG_NAME}")
          value=$(echo "${response}" | jq -r '.value // "false"' | tr '[:upper:]' '[:lower:]')
          if [[ "${value}" != "true" ]]; then
            value=false
          fi
          echo "enabled=${value}" >> "${GITHUB_OUTPUT}"
          echo "Cloudflare deploy feature flag set to: ${value}"

  build:
    needs: feature-flag
    if: ${{ needs.feature-flag.outputs.enabled == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install
        run: npm ci
      - name: Build
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: .next

  deploy:
    runs-on: ubuntu-latest
    needs: [feature-flag, build]
    if: ${{ needs.feature-flag.outputs.enabled == 'true' }}
    steps:
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .next
      - name: Publish to Cloudflare Pages (manual step)
        run: echo "Set up Cloudflare Pages and upload the `.next` build or use the official Pages Git integration."
